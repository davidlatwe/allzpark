---
trigger:

  # Already default, but made explicit here
  branches:
    include: ["*"]

  # Ensure Azure triggers a build on a new tag
  # We use these for GitHub releases
  tags:
    include: ["*"]

  paths:
    # Do not trigger a build on changes at these paths
    exclude:
      - docs/*
      - .gitignore
      - LICENSE.txt
      - README.md


jobs:

  # -----------------------------------------------------------------------
  #
  # Test
  #
  # -----------------------------------------------------------------------

  - job: Ubuntu
    pool:
      vmImage: "ubuntu-16.04"  # Xenial
    strategy:
      matrix:
        Python27-Rez:
          python.version: "2.7"
          rez.project: "rez"

        Python27-BleedingRez:
          python.version: "2.7"
          rez.project: "bleeding-rez"

        Python35-Rez:
          python.version: "3.5"
          rez.project: "rez"

        Python35-BleedingRez:
          python.version: "3.5"
          rez.project: "bleeding-rez"

        Python36-Rez:
          python.version: "3.6"
          rez.project: "rez"

        Python36-BleedingRez:
          python.version: "3.6"
          rez.project: "bleeding-rez"

        Python37-Rez:
          python.version: "3.7"
          rez.project: "rez"

        Python37-BleedingRez:
          python.version: "3.7"
          rez.project: "bleeding-rez"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          git clone https://github.com/nerdvegas/rez.git rez-src
          cd rez-src
          pip install .
        condition: eq(variables['rez.project'], 'rez')
        displayName: "pip install rez (for API)"

      - script: |
          pip install bleeding-rez
        condition: eq(variables['rez.project'], 'bleeding-rez')
        displayName: "pip install bleeding-rez"

      - script: |
          sudo apt-get install python-pyside
        condition: startsWith(variables['python.version'], '2.')
        displayName: "apt-get install PySide"

      - script: |
          sudo apt-get install python3-pyside2
        condition: startsWith(variables['python.version'], '3.')
        displayName: "apt-get install PySide2"

      - script: |
          pip install . --no-deps
        displayName: "pip install allzpark"

      - script: |
          python -m unittest discover
        displayName: "run tests"


  - job: MacOS
    pool:
      vmImage: "macOS-10.15"
    strategy:
      matrix:
        Python27:
          python.version: "2.7"
        Python37:
          python.version: "3.7"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          pip install . --no-deps
        displayName: "pip install"

  - job: Windows
    pool:
      vmImage: vs2017-win2016
    strategy:
      matrix:
        Python27:
          python.version: "2.7"
        Python37:
          python.version: "3.7"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"
      - powershell: |
          pip install . --no-deps
        displayName: "pip install"


  # -----------------------------------------------------------------------
  #
  # Deploy to PyPI
  #
  # -----------------------------------------------------------------------

  - job: Deploy
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags')
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      matrix:
        Python37:
          python.version: "3.7"

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - script: |
          pip install wheel twine
          python setup.py sdist bdist_wheel
          echo [distutils] > ~/.pypirc
          echo index-servers=pypi >> ~/.pypirc
          echo [pypi] >> ~/.pypirc
          echo username=$_LOGIN >> ~/.pypirc
          echo password=$_PASSWORD >> ~/.pypirc
          twine upload dist/*
        displayName: "Deploy to PyPI"

        # Decrypt secret variables provided by Azure web console
        env:
          _LOGIN: $(PYPI_LOGIN)
          _PASSWORD: $(PYPI_PASSWORD)
